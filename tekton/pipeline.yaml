apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: cn-docs-pipeline
  namespace: cn-docs
  labels:
    app: cn-docs
    pipeline: ci-cd
spec:
  description: "CI/CD Pipeline for Cloud Native Documentation"
  
  params:
    - name: git-url
      description: "Git repository URL (HTTPS with token or SSH)"
      default: "https://github.com/Cloud-Native-RS/docs-cloudnative.rs.git"
    - name: git-revision
      description: "Git revision to build"
      default: "main"
    - name: image-repository
      description: "Container image repository"
      default: "image-registry.openshift-image-registry.svc:5000/cn-docs/cn-docs"
    - name: image-tag
      description: "Container image tag"
      default: "latest"
    - name: project-name
      description: "OpenShift project name"
      default: "cn-docs"

  workspaces:
    - name: shared-workspace
      description: "Shared workspace for pipeline tasks"

  tasks:
    # Task 1: Clone Git repository using simple git commands
    - name: git-clone
      taskSpec:
        description: "Clone git repository"
        params:
          - name: url
            description: "git url to clone"
            type: string
          - name: revision
            description: "git revision to checkout"
            type: string
            default: "main"
        workspaces:
          - name: output
            description: "The git repo will be cloned onto this workspace"
        steps:
          - name: clone
            image: alpine/git:latest
            workingDir: $(workspaces.output.path)
            env:
              - name: HOME
                value: /tekton/home
            script: |
              #!/bin/sh
              set -xe
              
              # Clean workspace completely
              rm -rf ./* .git || true
              
              # Configure git to trust all directories
              export GIT_CONFIG_GLOBAL=/tmp/gitconfig
              git config --global safe.directory '*'
              git config --global http.sslVerify false
              
              # Setup authentication credentials if available
              if [ -f /tekton/creds/.gitconfig ]; then
                echo "Using Git credentials from service account"
                cp /tekton/creds/.gitconfig $HOME/.gitconfig
                chmod 600 $HOME/.gitconfig
              fi
              
              if [ -f /tekton/creds/.git-credentials ]; then
                echo "Using Git credential store"
                cp /tekton/creds/.git-credentials $HOME/.git-credentials
                chmod 600 $HOME/.git-credentials
                git config --global credential.helper store
              fi
              
              # SSH setup if SSH key is available
              if [ -f /tekton/creds/ssh-privatekey ]; then
                echo "Setting up SSH authentication"
                mkdir -p $HOME/.ssh
                cp /tekton/creds/ssh-privatekey $HOME/.ssh/id_rsa
                cp /tekton/creds/known_hosts $HOME/.ssh/known_hosts 2>/dev/null || true
                chmod 600 $HOME/.ssh/id_rsa
                chmod 700 $HOME/.ssh
                eval "$(ssh-agent -s)"
                ssh-add $HOME/.ssh/id_rsa
              fi
              
              echo "Cloning repository: $(params.url)"
              
              # Clone the repository
              if echo "$(params.url)" | grep -q "^git@"; then
                # SSH URL
                echo "Using SSH authentication"
                export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"
                git clone $(params.url) .
              else
                # HTTPS URL
                echo "Using HTTPS authentication"
                git clone $(params.url) .
              fi
              
              # Checkout specific revision
              git checkout $(params.revision)
              
              echo "Repository cloned successfully"
              echo "Current branch: $(git branch --show-current)"
              echo "Last commit: $(git log -1 --oneline)"
              ls -la
      params:
        - name: url
          value: $(params.git-url)
        - name: revision
          value: $(params.git-revision)
      workspaces:
        - name: output
          workspace: shared-workspace

    # Task 2: Build application using NodeJS
    - name: build-app
      runAfter: ["git-clone"]
      taskSpec:
        description: "Build NodeJS application"
        workspaces:
          - name: source
            description: "Source code workspace"
        steps:
          - name: install-and-build
            image: registry.access.redhat.com/ubi8/nodejs-18:latest
            workingDir: $(workspaces.source.path)
            script: |
              #!/bin/bash
              set -xe
              
              echo "Installing dependencies..."
              npm install
              
              echo "Building application..."
              npm run build
              
              echo "Build completed successfully"
              ls -la
      workspaces:
        - name: source
          workspace: shared-workspace

    # Task 3: Create S2I BuildConfig and trigger build
    - name: build-image
      runAfter: ["build-app"]
      taskSpec:
        description: "Create S2I build and push container image"
        params:
          - name: IMAGE_REPOSITORY
            description: "Image repository"
            type: string
          - name: IMAGE_TAG
            description: "Image tag"
            type: string
          - name: PROJECT_NAME
            description: "OpenShift project name"
            type: string
        workspaces:
          - name: source
            description: "Source code workspace"
        steps:
          - name: create-s2i-build
            image: registry.redhat.io/openshift4/ose-cli:latest
            workingDir: $(workspaces.source.path)
            script: |
              #!/bin/bash
              set -xe
              
              echo "Creating S2I BuildConfig..."
              
              # Switch to the correct project
              oc project $(params.PROJECT_NAME)
              
              # Delete existing BuildConfig if it exists
              oc delete buildconfig cn-docs-s2i --ignore-not-found=true
              
              # Create new BuildConfig using S2I strategy
              oc new-build nodejs:18-ubi9~. \
                --name=cn-docs-s2i \
                --to=$(params.IMAGE_REPOSITORY):$(params.IMAGE_TAG) \
                --strategy=source \
                --env NPM_CONFIG_PRODUCTION=false \
                --env NODE_ENV=production
              
              echo "Starting S2I build..."
              
              # Start the build and wait for completion
              oc start-build cn-docs-s2i --from-dir=. --wait --follow
              
              echo "S2I build completed successfully"
              
              # Verify the image was built (check the target ImageStream, not the BuildConfig name)
              oc get imagestream cn-docs -o yaml | grep -A 5 "tags:" || true
              
              echo "Image successfully built and pushed to $(params.IMAGE_REPOSITORY):$(params.IMAGE_TAG)"
      params:
        - name: IMAGE_REPOSITORY
          value: $(params.image-repository)
        - name: IMAGE_TAG
          value: $(params.image-tag)
        - name: PROJECT_NAME
          value: $(params.project-name)
      workspaces:
        - name: source
          workspace: shared-workspace

    # Task 4: Deploy to OpenShift
    - name: deploy
      runAfter: ["build-image"]
      taskSpec:
        description: "Deploy to OpenShift"
        params:
          - name: IMAGE_REPOSITORY
            type: string
          - name: IMAGE_TAG
            type: string
          - name: PROJECT_NAME
            type: string
        workspaces:
          - name: source
            description: "Source code workspace"
        steps:
          - name: deploy
            image: registry.redhat.io/openshift4/ose-cli:latest
            workingDir: $(workspaces.source.path)
            script: |
              #!/bin/bash
              set -xe
              
              echo "Deploying to OpenShift..."
              
              # Switch to project
              oc project $(params.PROJECT_NAME)
              
              # Deploy using native OpenShift commands (since Helm might not be available)
              echo "Creating/updating deployment..."
              
              # Create or update deployment with correct image reference
              oc create deployment cn-docs --image=$(params.IMAGE_REPOSITORY):$(params.IMAGE_TAG) --dry-run=client -o yaml | \
              oc apply -f -
              
              # Expose the service if it doesn't exist
              oc expose deployment cn-docs --port=3000 --target-port=3000 --dry-run=client -o yaml | \
              oc apply -f -
              
              # Create route if it doesn't exist (simple approach)
              oc expose service cn-docs || echo "Route might already exist"
              
              # Wait for deployment to be ready
              oc rollout status deployment/cn-docs --timeout=300s
              
              # Get deployment status
              oc get pods -n $(params.PROJECT_NAME)
              oc get routes -n $(params.PROJECT_NAME)
              
              echo "Deployment completed successfully!"
      params:
        - name: IMAGE_REPOSITORY
          value: $(params.image-repository)
        - name: IMAGE_TAG
          value: $(params.image-tag)
        - name: PROJECT_NAME
          value: $(params.project-name)
      workspaces:
        - name: source
          workspace: shared-workspace
