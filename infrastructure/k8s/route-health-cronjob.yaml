apiVersion: batch/v1
kind: CronJob
metadata:
  name: route-health-check
  namespace: cn-docs
  labels:
    app: cn-docs
    component: route-monitor
spec:
  # Run every 5 minutes
  schedule: "*/5 * * * *"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      activeDeadlineSeconds: 300  # 5 minutes timeout
      template:
        metadata:
          labels:
            app: cn-docs
            component: route-monitor
        spec:
          serviceAccountName: cn-docs-route-monitor
          restartPolicy: OnFailure
          containers:
          - name: route-health-check
            image: registry.redhat.io/openshift4/ose-cli:latest
            command:
            - /bin/bash
            - -c
            - |
              set -xe
              
              echo "üîç Starting scheduled route health check"
              
              # Clone repository to get health check script
              cd /tmp
              git clone https://github.com/Cloud-Native-RS/docs-cloudnative.rs.git repo || {
                echo "Failed to clone repository, using fallback check"
                
                # Fallback: simple health check
                ROUTE_URL="https://cn-docs-cn-docs.apps.ocp-5.datsci.softergee.si"
                HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 "$ROUTE_URL" || echo "000")
                
                if [[ "$HTTP_CODE" == "200" ]]; then
                  echo "‚úÖ Route is healthy (HTTP $HTTP_CODE)"
                  exit 0
                else
                  echo "‚ùå Route is unhealthy (HTTP $HTTP_CODE), recreating..."
                  
                  # Recreate route
                  oc delete route cn-docs -n cn-docs --ignore-not-found=true
                  oc create route edge cn-docs \
                    --service=cn-docs \
                    --hostname=cn-docs-cn-docs.apps.ocp-5.datsci.softergee.si \
                    -n cn-docs
                  
                  echo "‚úÖ Route recreated"
                  exit 0
                fi
              }
              
              cd repo
              chmod +x scripts/route-health-check.sh
              
              # Set environment variables
              export NAMESPACE=cn-docs
              export APP_NAME=cn-docs
              export SERVICE_NAME=cn-docs
              export ROUTE_HOSTNAME=cn-docs-cn-docs.apps.ocp-5.datsci.softergee.si
              
              # Run health check
              ./scripts/route-health-check.sh check
              
              echo "‚úÖ Scheduled health check completed"
            env:
            - name: HOME
              value: /tmp
            resources:
              requests:
                memory: "64Mi"
                cpu: "50m"
              limits:
                memory: "128Mi"
                cpu: "100m"
            securityContext:
              runAsNonRoot: true
              runAsUser: 1001
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cn-docs-route-monitor
  namespace: cn-docs
  labels:
    app: cn-docs
    component: route-monitor

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cn-docs-route-monitor
  namespace: cn-docs
  labels:
    app: cn-docs
    component: route-monitor
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["route.openshift.io"]
  resources: ["routes"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cn-docs-route-monitor
  namespace: cn-docs
  labels:
    app: cn-docs
    component: route-monitor
subjects:
- kind: ServiceAccount
  name: cn-docs-route-monitor
  namespace: cn-docs
roleRef:
  kind: Role
  name: cn-docs-route-monitor
  apiGroup: rbac.authorization.k8s.io
